%%%% Starting test 2048-heuristics
Group begin: 2048-heuristics
Group begin: board-creation
Test begin:
  test-name: "Board is a vector"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 25
  source-form: (test-assert "Board is a vector" (vector? board))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "Board has 4 rows"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 26
  source-form: (test-eqv "Board has 4 rows" 4 (vector-length board))
Test end:
  result-kind: pass
  actual-value: 4
  expected-value: 4
Test begin:
  test-name: "Each row is a vector"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 27
  source-form: (test-assert "Each row is a vector" (vector-every vector? board))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "Each row has 4 columns"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 29
  source-form: (test-eqv "Each row has 4 columns" 4 (vector-length (vector-ref board 0)))
Test end:
  result-kind: pass
  actual-value: 4
  expected-value: 4
Test begin:
  test-name: "All cells are initially 0"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 31
  source-form: (test-assert "All cells are initially 0" (let ((all-zero #t)) (vector-for-each (lambda (i row) (unless (vector-every zero? row) (set! all-zero #f))) board) all-zero))
Test end:
  result-kind: pass
  actual-value: #t
Group end: board-creation
Group begin: board-access
Test begin:
  test-name: "Can set and get cell value"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 43
  source-form: (test-eqv "Can set and get cell value" 8 (board-ref board 1 2))
Test end:
  result-kind: pass
  actual-value: 8
  expected-value: 8
Test begin:
  test-name: "Other cells remain 0"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 44
  source-form: (test-eqv "Other cells remain 0" 0 (board-ref board 0 0))
Test end:
  result-kind: pass
  actual-value: 0
  expected-value: 0
Group end: board-access
Group begin: board-copy
Test begin:
  test-name: "Copied board is equal"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 51
  source-form: (test-assert "Copied board is equal" (board-equal? board copy-board))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "But not the same object"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 52
  source-form: (test-assert "But not the same object" (not (eq? board copy-board)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "Changes to copy don't affect original"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 54
  source-form: (test-assert "Changes to copy don't affect original" (zero? (board-ref board 0 0)))
Test end:
  result-kind: pass
  actual-value: #t
Group end: board-copy
Group begin: slide-row
Test begin:
  test-name: "Slide left merges adjacent"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 62
  source-form: (test-equal "Slide left merges adjacent" #(4 0 0 0) (slide-row row (quote left)))
Test end:
  result-kind: pass
  actual-value: #(4 0 0 0)
  expected-value: #(4 0 0 0)
Test begin:
  test-name: "Slide right merges adjacent"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 63
  source-form: (test-equal "Slide right merges adjacent" #(0 0 0 4) (slide-row row (quote right)))
Test end:
  result-kind: pass
  actual-value: #(0 0 0 4)
  expected-value: #(0 0 0 4)
Test begin:
  test-name: "Slide left no merge"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 66
  source-form: (test-equal "Slide left no merge" #(2 4 0 0) (slide-row row (quote left)))
Test end:
  result-kind: pass
  actual-value: #(2 4 0 0)
  expected-value: #(2 4 0 0)
Test begin:
  test-name: "Slide right no merge"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 67
  source-form: (test-equal "Slide right no merge" #(0 0 2 4) (slide-row row (quote right)))
Test end:
  result-kind: pass
  actual-value: #(0 0 2 4)
  expected-value: #(0 0 2 4)
Group end: slide-row
Group begin: merge-adjacent
Test begin:
  test-name: "Empty list"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 70
  source-form: (test-equal "Empty list" (quote ()) (merge-adjacent (quote ())))
Test end:
  result-kind: pass
  actual-value: ()
  expected-value: ()
Test begin:
  test-name: "Single value"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 71
  source-form: (test-equal "Single value" (quote (2)) (merge-adjacent (quote (2))))
Test end:
  result-kind: pass
  actual-value: (2)
  expected-value: (2)
Test begin:
  test-name: "Equal values"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 72
  source-form: (test-equal "Equal values" (quote (4)) (merge-adjacent (quote (2 2))))
Test end:
  result-kind: pass
  actual-value: (4)
  expected-value: (4)
Test begin:
  test-name: "Non-equal values"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 73
  source-form: (test-equal "Non-equal values" (quote (2 4)) (merge-adjacent (quote (2 4))))
Test end:
  result-kind: pass
  actual-value: (2 4)
  expected-value: (2 4)
Test begin:
  test-name: "Multiple pairs"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 74
  source-form: (test-equal "Multiple pairs" (quote (4 8)) (merge-adjacent (quote (2 2 4 4))))
Test end:
  result-kind: pass
  actual-value: (4 8)
  expected-value: (4 8)
Test begin:
  test-name: "Mixed values"
  source-file: "/home/dsp-dr/ghq/github.com/aygp-dr/2048-heuristics/tests/test-2048.scm"
  source-line: 75
  source-form: (test-equal "Mixed values" (quote (2 8 4)) (merge-adjacent (quote (2 4 4 4))))
Test end:
  result-kind: pass
  actual-value: (2 8 4)
  expected-value: (2 8 4)
Group end: merge-adjacent
Group begin: move-board
Group end: move-board
